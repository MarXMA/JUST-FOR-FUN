#include<iostream>
using namespace std;
void merge(int A[], int first, int mid, int last, int temp[])
{
	int a = first, b = mid, c = mid + 1, d = last;
	int i = first; int j = mid + 1; int k = 0; int n = 0; int m = 0;
	while (i <=mid&&j <= last)
	{
		if (A[i] < A[j])
			temp[k++] = A[i++];
		else
			temp[k++] = A[j++];
	}
	while (i <= mid)
		temp[k++] = A[i++];
	while (j <= last)
		temp[k++] = A[j++];
	for (n,m; n < k; n++,m++)
		A[first + n] = temp[m];
}void mergeSort(int  A[], int first,int last,int temp[])
{
	if (first < last)
	{
		int mid = (first + last) / 2;
		mergeSort(A, first, mid, temp);
		mergeSort(A, mid + 1, last, temp);
		merge(A, first, mid, last, temp);
	}
}

bool MergeSort(int A[], int size)
{
	int * temp = new int[size];
	if (temp == NULL)
		return 0;
	else
	{
		mergeSort(A, 0, size - 1, temp);
	}
	delete[]temp;
	return true;
}

int main()
{
	int A[] = { 2,1,4,5,3,2,5,6,7,9,8 };
	MergeSort(A, 11);
	for (int i = 0; i < 11; i++)
		cout << A[i] << endl;
}
